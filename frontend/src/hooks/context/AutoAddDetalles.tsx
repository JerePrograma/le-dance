// src/components/AutoAddDetalles.tsx
import { useEffect } from "react";
import { useFormikContext } from "formik";
import type { CobranzasFormValues, DeudasPendientesResponse } from "../../types/types";

interface AutoAddDetallesProps {
    deudaData: DeudasPendientesResponse;
}

export const AutoAddDetalles: React.FC<AutoAddDetallesProps> = ({ deudaData }) => {
    const { values, setFieldValue } = useFormikContext<CobranzasFormValues>();

    // Generamos los detalles autogenerados a partir de la deuda
    const autoGeneratedDetails = deudaData.pagosPendientes?.flatMap((pago) =>
        pago.detallePagos?.map((det) => ({
            autoGenerated: true,
            id: det.id,
            concepto: det.concepto,
            valorBase: det.valorBase,
            importe: det.importe,
            aCobrar: det.aCobrar,
        })) || []
    ) || [];

    const mensualDetails = deudaData.mensualidadesPendientes?.flatMap((mens) =>
        mens.totalPagar > 0
            ? [{
                autoGenerated: true,
                id: mens.id,
                concepto: mens.descripcion,
                valorBase: mens.valorBase,
                importe: mens.totalPagar,
                aCobrar: mens.totalPagar,
            }]
            : []
    ) || [];

    // Combinamos ambos conjuntos
    const allAutoDetails = [...autoGeneratedDetails, ...mensualDetails];

    useEffect(() => {
        // Obtenemos los IDs ya presentes en el formulario
        const existingIds = new Set(values.detallePagos.map((detalle) => detalle.id));
        // Obtenemos los IDs de los detalles que el usuario eliminó
        const removedIds = new Set(values.autoRemoved || []);
        // Conservamos los detalles manuales
        const manualDetails = values.detallePagos.filter((detalle) => !detalle.autoGenerated);
        // Conservamos los autogenerados que no hayan sido removidos
        const currentAutoGen = values.detallePagos.filter((detalle) => detalle.autoGenerated);
        // Agregamos los nuevos que no estén en el formulario y que no estén marcados como removidos
        const newAutoGen = allAutoDetails.filter((newDet) => !existingIds.has(newDet.id) && !removedIds.has(newDet.id));

        const mergedDetails = [...manualDetails, ...currentAutoGen, ...newAutoGen];

        if (JSON.stringify(mergedDetails) !== JSON.stringify(values.detallePagos)) {
            setFieldValue("detallePagos", mergedDetails);
        }
    }, [allAutoDetails, setFieldValue, values.detallePagos, values.autoRemoved]);

    return null;
};
