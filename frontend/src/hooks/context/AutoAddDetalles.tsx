// AutoAddDetalles.tsx
import { useEffect, useRef } from "react";
import { useFormikContext } from "formik";
import {
    CobranzasFormValues,
    ReporteMensualidadDTO,
    ConceptoResponse,
    MatriculaResponse,
} from "../../types/types";

interface AutoAddDetallesProps {
    matricula: MatriculaResponse | null;
    mensualidades: ReporteMensualidadDTO[];
    conceptos: ConceptoResponse[];
}

export const AutoAddDetalles: React.FC<AutoAddDetallesProps> = ({
    matricula,
    mensualidades,
    conceptos,
}) => {
    const { values, setFieldValue } = useFormikContext<CobranzasFormValues>();
    const lastAutoDetailsRef = useRef<any[]>([]);
    const lastAlumnoRef = useRef<string | null>(null);

    useEffect(() => {
        console.log("AutoAddDetalles effect disparado", {
            alumno: values.alumno,
            mensualidades,
            matricula,
            conceptos,
            detallePagos: values.detallePagos,
        });
        if (!values.alumno) {
            console.log("No hay alumno seleccionado, se omite auto-add");
            return;
        }

        // Si el alumno cambió, reiniciamos los detalles manuales
        let manualDetails: any[] = [];
        if (lastAlumnoRef.current !== values.alumno) {
            console.log(
                "Alumno cambiado de",
                lastAlumnoRef.current,
                "a",
                values.alumno,
                "- reiniciando detalles manuales."
            );
            lastAlumnoRef.current = values.alumno;
        } else {
            manualDetails = values.detallePagos.filter(
                (detail) => !detail.autoGenerated
            );
        }
        console.log("Detalles manuales (preservados):", manualDetails);

        // Calcular detalles auto-generados de mensualidades
        const computedAutoDetails = mensualidades.map((cuota) => {
            const disciplinaId = cuota?.disciplina?.id ?? 0;
            const disciplinaNombre = cuota?.disciplina?.nombre ?? "Sin Disciplina";
            const cantidad = 1;
            const cuotaImporte = Number(cuota.importe) || 0;
            const cuotaBonificacion = cuota?.bonificacion
                ? Number(cuota.bonificacion.valorFijo)
                : 0;
            const cuotaRecargo = Number(cuota.recargo) || 0;
            const cuotaTotal = cuotaImporte - cuotaBonificacion + cuotaRecargo;
            return {
                autoGenerated: true,
                id: cuota.mensualidadId,
                codigoConcepto: disciplinaId,
                concepto: disciplinaNombre,
                cuota: cantidad.toString(),
                valorBase: cuotaImporte,
                bonificacionId: cuotaBonificacion ? cuotaBonificacion.toString() : "",
                recargoId: cuotaRecargo ? cuotaRecargo.toString() : "",
                aFavor: 0,
                importe: cuotaImporte,
                aCobrar: cuotaTotal,
                abono: 0,
            };
        });
        console.log("Detalles auto-generados de mensualidades:", computedAutoDetails);

        // Calcular detalle de matrícula (si corresponde)
        let computedMatriculaDetails: any[] = [];
        if (matricula && !matricula.pagada) {
            const conceptoMatricula = conceptos.find((c) =>
                c.descripcion.toLowerCase().includes("matricula")
            );
            const precio = conceptoMatricula ? conceptoMatricula.precio : 0;
            computedMatriculaDetails.push({
                autoGenerated: true,
                id: null,
                codigoConcepto: conceptoMatricula ? Number(conceptoMatricula.id) : 0,
                concepto: "Matrícula",
                cuota: "1",
                valorBase: precio,
                bonificacionId: "",
                recargoId: "",
                aFavor: 0,
                importe: precio,
                aCobrar: precio,
                abono: 0,
            });
        }
        console.log("Detalles auto-generados de matrícula:", computedMatriculaDetails);

        const newAutoDetails = [...computedAutoDetails, ...computedMatriculaDetails];
        console.log("Nuevos detalles auto-generados:", newAutoDetails);

        // Actualizar solo si los detalles auto-generados cambiaron
        if (
            JSON.stringify(newAutoDetails) === JSON.stringify(lastAutoDetailsRef.current)
        ) {
            console.log("Los detalles auto-generados no han cambiado.");
        } else {
            console.log("Actualizando lastAutoDetailsRef con nuevos datos.");
            lastAutoDetailsRef.current = newAutoDetails;
        }

        // Fusionar los detalles manuales y los auto-generados
        const mergedDetails = [...manualDetails, ...newAutoDetails];
        console.log("Detalles fusionados:", mergedDetails);

        // Si la fusión difiere de lo que ya hay en Formik, actualizar
        if (JSON.stringify(mergedDetails) !== JSON.stringify(values.detallePagos)) {
            console.log("Actualizando 'detallePagos' en Formik con los detalles fusionados.");
            setFieldValue("detallePagos", mergedDetails);
        } else {
            console.log("Los detalles fusionados son idénticos a los actuales, sin actualización.");
        }
    }, [
        values.alumno,
        mensualidades,
        matricula,
        conceptos,
        values.detallePagos, // Se agregó para reaccionar a los cambios en los detalles manuales
        setFieldValue,
    ]);

    return null;
};
