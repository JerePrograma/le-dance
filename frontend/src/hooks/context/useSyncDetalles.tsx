import { useEffect } from "react";
import { useFormikContext } from "formik";
import type {
  CobranzasFormValues,
  DetallePagoRegistroRequestExt,
  DetallePagoResponse,
  AlumnoDataResponse,
} from "../../types/types";

/*
  En este hook queremos:
  - Mostrar en el campo "descripcionConcepto" solo la parte anterior al primer guión.
  - Dejar el valor del campo "cuotaOCantidad" tal como viene persistido en el backend.
*/
const mapDetallePagos = (
  detallesPendientes: DetallePagoResponse[],
  alumnoData: AlumnoDataResponse
): DetallePagoRegistroRequestExt[] => {
  let creditoRestante = Number(alumnoData.alumno?.creditoAcumulado || 0);
  return detallesPendientes.map((det) => {
    let baseValue = det.importePendiente ?? 0;
    if (
      det.descripcionConcepto?.toUpperCase().includes("MATRICULA") &&
      creditoRestante > 0
    ) {
      const nuevoValor = Math.max(0, baseValue - creditoRestante);
      baseValue = nuevoValor;
    }
    return {
      autoGenerated: true,
      id: det.id,
      version: det.version,
      // Se mantiene el valor completo para envío
      descripcionConcepto: det.descripcionConcepto || "",
      // Nuevo campo para la vista: solo se toma la parte anterior al primer guión si es MENSUALIDAD
      descripcionVisual:
        det.tipo === "MENSUALIDAD" &&
        det.descripcionConcepto?.indexOf("-") !== -1
          ? det.descripcionConcepto.split("-")[0].trim()
          : det.descripcionConcepto || "",
      conceptoId: det.conceptoId ?? null,
      subConceptoId: det.subConceptoId ?? null,
      cuotaOCantidad: det.cuotaOCantidad, // Permanece el valor real
      valorBase: det.valorBase ?? 0,
      bonificacionId: det.bonificacionId ?? null,
      recargoId: det.recargoId ?? null,
      importePendiente: baseValue,
      ACobrar: baseValue,
      cobrado: det.cobrado ?? false,
      mensualidadId: det.mensualidadId ?? null,
      matriculaId: det.matriculaId ?? null,
      importeInicial: det.importeInicial ?? 0,
      stockId: det.stockId ?? null,
      pagoId: det.pagoId ?? null,
      tieneRecargo: det.tieneRecargo,
      estadoPago: det.estadoPago,
      removido: det.removido,
      alumno: alumnoData.alumno,
      tipo: det.tipo || "MENSUALIDAD",
    };
  });
};

export const useSyncDetalles = (alumnoData: AlumnoDataResponse | undefined) => {
  const { setFieldValue } = useFormikContext<CobranzasFormValues>();

  useEffect(() => {
    if (!alumnoData) return;

    const detallesPendientes =
      alumnoData.detallePagosPendientes || alumnoData.detallePagos || [];
    const autoDetails = mapDetallePagos(detallesPendientes, alumnoData);

    // Si deseas mantener sólo aquellos detalles con importePendiente > 0 (según tu lógica original)
    const autoDetailsFiltered = autoDetails.filter(
      (det) => Number(det.importePendiente) > 0
    );

    setFieldValue("detallePagos", autoDetailsFiltered);
    setFieldValue("autoRemoved", []);
  }, [alumnoData, setFieldValue]);

  useEffect(() => {
    if (!alumnoData) return;

    const detallesPendientes =
      alumnoData.detallePagosPendientes || alumnoData.detallePagos || [];
    const nuevoReciboNro =
      detallesPendientes.length > 0 ? detallesPendientes[0].pagoId || 0 : 0;
    setFieldValue("reciboNro", nuevoReciboNro);
  }, [alumnoData, setFieldValue]);
};
