// src/hooks/useSyncDetalles.ts
import { useEffect } from "react";
import { useFormikContext } from "formik";
import type {
  CobranzasFormValues,
  DeudasPendientesResponse,
  DetallePagoRegistroRequest,
} from "../../types/types";
import isEqual from "lodash/isEqual";
import { normalizeInscripcion } from "../../funcionalidades/pagos/PagosFormulario";
import { useInscripcionesActivas } from "../../hooks/useInscripcionesActivas";

// Función de mapeo centralizado: transforma cada detalle de pago pendiente
// al formato del formulario, utilizando el 'mensualidadId' como identificador principal.
const mapDetallePagos = (
  detallePagosPendientes: any[]
): DetallePagoRegistroRequest[] => {
  return detallePagosPendientes.map((det) => ({
    autoGenerated: true,
    // Se utiliza 'mensualidadId' si existe; de lo contrario, se usa el id original.
    id: det.mensualidadId ?? det.id,
    descripcionConcepto: det.descripcionConcepto || "",
    conceptoId: det.conceptoId ?? null,
    subConceptoId: det.subConceptoId ?? null,
    cuota: det.cuota || "1",
    montoOriginal: det.montoOriginal || 0,
    bonificacionId: det.bonificacionId ?? null,
    recargoId: det.recargoId ?? null,
    // Se utiliza 'importePendiente' o, en su defecto, 'importeInicial'
    importePendiente: det.importePendiente || det.importeInicial,
    aCobrar: det.importePendiente || 0,
    cobrado: det.cobrado || false,
    mensualidadId: det.mensualidadId ?? null,
    matriculaId: det.matriculaId ?? null,
    aFavor: 0,
    stockId: det.stockId ?? null,
  }));
};

export const useSyncDetalles = (
  deudaData: DeudasPendientesResponse,
  ultimoPago: any
) => {
  const { values, setFieldValue } = useFormikContext<CobranzasFormValues>();
  const inscripcionesQuery = useInscripcionesActivas(Number(values.alumnoId));

  useEffect(() => {
    // 1. Generar detalles automáticos a partir de la lista unificada
    const autoDetails = mapDetallePagos(deudaData.detallePagosPendientes || []);

    // 2. Filtrar los detalles que el usuario eliminó manualmente
    const removedIds = new Set(values.autoRemoved || []);
    const autoDetailsFiltered = autoDetails.filter((det) =>
      det.id ? !removedIds.has(det.id) && Number(det.aCobrar) !== 0 : Number(det.aCobrar) !== 0
    );

    // 3. Separar los detalles manuales ingresados por el usuario
    const manualDetails = values.detallePagos.filter(
      (det) => !det.autoGenerated
    );

    // 4. Prevenir duplicados entre detalles manuales y automáticos
    const manualIds = new Set(
      manualDetails.filter((det) => det.id !== null).map((det) => det.id)
    );
    const finalAutoDetails = autoDetailsFiltered.filter((autoDet) => {
      if (autoDet.id !== null) {
        return !manualIds.has(autoDet.id);
      } else {
        return !manualDetails.some(
          (manDet) =>
            manDet.descripcionConcepto === autoDet.descripcionConcepto &&
            manDet.montoOriginal === autoDet.montoOriginal
        );
      }
    });

    // 5. Fusionar los detalles manuales con los automáticos finales
    const mergedDetails = [...manualDetails, ...finalAutoDetails];

    // 6. Actualizar el formulario solo si hay cambios en los detalles
    if (!isEqual(mergedDetails, values.detallePagos)) {
      setFieldValue("detallePagos", mergedDetails);
    }

    // 7. Asignar la inscripción si aún no está asignada y se encuentra en la data
    if (!values.inscripcion.id || values.inscripcion.id === -1) {
      let inscripcionValida = null;
      if (deudaData.detallePagosPendientes?.length) {
        inscripcionValida = deudaData.detallePagosPendientes.find(
          (det) => det.inscripcion != null
        )?.inscripcion;
      }
      if (!inscripcionValida) {
        const detConInscripcionId = deudaData.detallePagosPendientes.find(
          (det) => det.inscripcion && det.inscripcion.id && det.inscripcion.id !== 0
        );
        if (detConInscripcionId && inscripcionesQuery.data) {
          inscripcionValida = inscripcionesQuery.data.find(
            (ins) => ins.id === detConInscripcionId.inscripcion.id
          );
        }
      }
      if (inscripcionValida) {
        const normalized = normalizeInscripcion(inscripcionValida);
        setFieldValue("inscripcion", normalized);
      }
    }
  }, [
    deudaData,
    ultimoPago,
    setFieldValue,
    values.detallePagos,
    values.autoRemoved,
    inscripcionesQuery.data,
    values.inscripcion,
  ]);
};
