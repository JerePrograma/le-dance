// src/hooks/useSyncDetalles.ts
import { useEffect } from "react";
import { useFormikContext } from "formik";
import type {
  CobranzasFormValues,
  DetallePagoRegistroRequestExt,
  DetallePagoResponse,
  AlumnoDataResponse,
} from "../../types/types";

// Función para mapear los detalles pendientes
// NOTA: Cambiamos la firma para que reciba 'alumnoData'
const mapDetallePagos = (
  detallesPendientes: DetallePagoResponse[],
  alumnoData: AlumnoDataResponse
): DetallePagoRegistroRequestExt[] => {
  // Tomamos el saldo a favor del alumno
  let creditoRestante = Number(alumnoData.alumno?.creditoAcumulado || 0);

  return detallesPendientes.map((det) => {
    // El importe base de este detalle
    let baseValue = det.importePendiente ?? 0;

    // Si es una 'MATRICULA' y aún tenemos saldo a favor, restamos
    if (
      det.descripcionConcepto?.toUpperCase().includes("MATRICULA") &&
      creditoRestante > 0
    ) {
      // Restamos y nos aseguramos de no caer por debajo de 0
      const nuevoValor = Math.max(0, baseValue - creditoRestante);

      // Y asignamos la versión final a 'baseValue'
      baseValue = nuevoValor;
    }

    return {
      autoGenerated: true,
      id: det.id,
      version: det.version,
      descripcionConcepto: det.descripcionConcepto || "",
      conceptoId: det.conceptoId ?? null,
      subConceptoId: det.subConceptoId ?? null,
      cuotaOCantidad: det.cuotaOCantidad ?? "1",
      valorBase: det.valorBase ?? 0,
      bonificacionId: det.bonificacionId ?? null,
      recargoId: det.recargoId ?? null,
      // Aquí ya tenemos el importePendiente modificado si corresponde
      importePendiente: baseValue,
      aCobrar: baseValue, // También lo ajustamos
      cobrado: det.cobrado ?? false,
      mensualidadId: det.mensualidadId ?? null,
      matriculaId: det.matriculaId ?? null,
      importeInicial: det.importeInicial ?? null,
      stockId: det.stockId ?? null,
      pagoId: det.pagoId ?? null,
      tieneRecargo: det.tieneRecargo,
      estadoPago: det.estadoPago,
      removido: det.removido,
    };
  });
};

export const useSyncDetalles = (alumnoData: AlumnoDataResponse | undefined) => {
  const { setFieldValue } = useFormikContext<CobranzasFormValues>();

  // Cada vez que cambia el alumno, se reinician los detalles (y se limpian los datos "autoRemoved")
  useEffect(() => {
    if (!alumnoData) return;

    const detallesPendientes =
      alumnoData.detallePagosPendientes || alumnoData.detallePagos || [];

    // Mapear los detalles pendientes (ignoramos los detalles actuales para un reinicio total)
    const autoDetails = mapDetallePagos(detallesPendientes, alumnoData);

    // Filtrar para conservar solo aquellos con un importe mayor a 0
    const autoDetailsFiltered = autoDetails.filter(
      (det) => Number(det.importePendiente) > 0
    );

    // Reiniciamos el campo "detallePagos" y también borramos cualquier autoRemoved previo
    setFieldValue("detallePagos", autoDetailsFiltered);
    setFieldValue("autoRemoved", []);
  }, [alumnoData, setFieldValue]);

  // Cada vez que cambia el alumno, se actualiza el número de recibo según el primer detalle pendiente
  useEffect(() => {
    if (!alumnoData) return;

    const detallesPendientes =
      alumnoData.detallePagosPendientes || alumnoData.detallePagos || [];
    const nuevoReciboNro =
      detallesPendientes.length > 0 ? detallesPendientes[0].pagoId || 0 : 0;
    setFieldValue("reciboNro", nuevoReciboNro);
  }, [alumnoData, setFieldValue]);
};
