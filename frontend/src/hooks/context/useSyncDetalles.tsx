// src/hooks/useSyncDetalles.ts
import { useEffect } from "react";
import { useFormikContext } from "formik";
import type {
  CobranzasFormValues,
  DeudasPendientesResponse,
  DetallePagoRegistroRequest,
} from "../../types/types";
import isEqual from "lodash/isEqual";
import { useInscripcionesActivas } from "../../hooks/useInscripcionesActivas";
import { normalizeInscripcion } from "../../funcionalidades/pagos/NormalizeInscripcion";

// Función de mapeo centralizado: transforma cada detalle de pago pendiente
// al formato del formulario, utilizando el 'mensualidadId' como identificador principal.
const mapDetallePagos = (
  detallePendientes: any[],
  currentDetalles: DetallePagoRegistroRequest[]
): DetallePagoRegistroRequest[] => {
  return detallePendientes.map((det) => {
    const idKey = det.mensualidadId ?? det.id;
    // Buscar si ya existe un detalle en el formulario con este id
    const existing = currentDetalles.find((d) => d.id === idKey);
    return {
      autoGenerated: true,
      id: idKey,
      descripcionConcepto: det.descripcionConcepto || "",
      conceptoId: det.conceptoId ?? null,
      subConceptoId: det.subConceptoId ?? null,
      cuota: det.cuota || "1",
      montoOriginal: det.montoOriginal || 0,
      bonificacionId: det.bonificacionId ?? null,
      recargoId: det.recargoId ?? null,
      importePendiente: det.importePendiente || det.importeInicial,
      // Si ya existe un valor en el formulario, preservarlo; de lo contrario, asignar el calculado
      aCobrar:
        existing && existing.aCobrar !== undefined
          ? existing.aCobrar
          : (det.importePendiente || 0),
      cobrado: det.cobrado || false,
      mensualidadId: det.mensualidadId ?? null,
      matriculaId: det.matriculaId ?? null,
      aFavor: 0,
      stockId: det.stockId ?? null,
    };
  });
};

export const useSyncDetalles = (
  deudaData: DeudasPendientesResponse,
  ultimoPago: any
) => {
  const { values, setFieldValue } = useFormikContext<CobranzasFormValues>();
  const inscripcionesQuery = useInscripcionesActivas(Number(values.alumnoId));

  useEffect(() => {
    // Usar el array actual de detalles para preservar valores manuales (como aCobrar)
    const autoDetails = mapDetallePagos(
      deudaData.detallePagosPendientes || [],
      values.detallePagos
    );

    // Filtrar los detalles que el usuario eliminó manualmente
    const removedIds = new Set(values.autoRemoved || []);
    const autoDetailsFiltered = autoDetails.filter((det) =>
      det.id ? !removedIds.has(det.id) && Number(det.aCobrar) !== 0 : Number(det.aCobrar) !== 0
    );

    // Separar los detalles manuales ingresados por el usuario
    const manualDetails = values.detallePagos.filter(
      (det) => !det.autoGenerated
    );

    // Prevenir duplicados entre manuales y automáticos
    const manualIds = new Set(
      manualDetails.filter((det) => det.id !== null).map((det) => det.id)
    );
    const finalAutoDetails = autoDetailsFiltered.filter((autoDet) => {
      if (autoDet.id !== null) {
        return !manualIds.has(autoDet.id);
      } else {
        return !manualDetails.some(
          (manDet) =>
            manDet.descripcionConcepto === autoDet.descripcionConcepto &&
            manDet.montoOriginal === autoDet.montoOriginal
        );
      }
    });

    // Fusionar los detalles manuales con los automáticos finales
    const mergedDetails = [...manualDetails, ...finalAutoDetails];

    // Actualizar el formulario solo si hay cambios
    if (!isEqual(mergedDetails, values.detallePagos)) {
      setFieldValue("detallePagos", mergedDetails);
    }

    // Asignar la inscripción si aún no está asignada y se encuentra en la data.
    if (!values.inscripcion?.id || values.inscripcion?.id === -1) {
      let inscripcionValida = null;
      if (deudaData.detallePagosPendientes?.length) {
        inscripcionValida = deudaData.detallePagosPendientes.find(
          (det) => det.inscripcion != null
        )?.inscripcion;
      }
      if (!inscripcionValida) {
        const detConInscripcionId = deudaData.detallePagosPendientes.find(
          (det) =>
            det.inscripcion && det.inscripcion.id && det.inscripcion.id !== 0
        );
        if (detConInscripcionId && inscripcionesQuery.data) {
          inscripcionValida = inscripcionesQuery.data.find(
            (ins) => ins.id === detConInscripcionId.inscripcion.id
          );
        }
      }
      if (inscripcionValida) {
        const normalized = normalizeInscripcion(inscripcionValida);
        setFieldValue("inscripcion", normalized);
      }
    }
  }, [
    deudaData,
    ultimoPago,
    setFieldValue,
    values.detallePagos,
    values.autoRemoved,
    inscripcionesQuery.data,
    values.inscripcion,
  ]);
};
