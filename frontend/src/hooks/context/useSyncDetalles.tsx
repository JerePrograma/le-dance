// src/hooks/useSyncDetalles.ts
import { useEffect } from "react";
import { useFormikContext } from "formik";
import isEqual from "lodash/isEqual";
import type {
  CobranzasFormValues,
  DetallePagoRegistroRequest,
  DetallePagoRegistroRequestExt,
  DetallePagoResponse,
  AlumnoDataResponse,
} from "../../types/types";

/**
 * Función de mapeo que transforma cada detalle pendiente obtenido (DetallePagoResponse)
 * al formato que utiliza el formulario.
 */
const mapDetallePagos = (
  detallePendientes: DetallePagoResponse[],
  currentDetalles: DetallePagoRegistroRequest[]
): DetallePagoRegistroRequestExt[] => {
  console.log(
    "[mapDetallePagos] Iniciando mapeo de detalles pendientes:",
    detallePendientes
  );
  const mapped = detallePendientes.map((det) => {
    // Se utiliza 'mensualidadId' si existe, de lo contrario se utiliza 'id'
    const idKey = det.mensualidadId ?? det.id;
    console.log(`[mapDetallePagos] Procesando detalle con idKey: ${idKey}`);

    // Buscar si ya existe un detalle en el formulario con el idKey
    const existing = currentDetalles.find((d) => d.id === idKey);
    if (existing) {
      console.log(
        `[mapDetallePagos] Se encontró detalle existente para id ${idKey}:`,
        existing
      );
    } else {
      console.log(
        `[mapDetallePagos] No se encontró detalle existente para id ${idKey}`
      );
    }

    const mappedDetail: DetallePagoRegistroRequestExt = {
      autoGenerated: true,
      id: det.id, // Siempre usamos el id original del DetallePago
      version: det.version,
      descripcionConcepto: det.descripcionConcepto || "",
      conceptoId: det.conceptoId ?? null,
      subConceptoId: det.subConceptoId ?? null,
      cuotaOCantidad: det.cuotaOCantidad ?? "1",
      valorBase: det.valorBase ?? (det as any).montoOriginal ?? 0,
      bonificacionId: det.bonificacionId ?? null,
      recargoId: det.recargoId ?? null,
      importePendiente: det.importePendiente,
      aCobrar: existing?.aCobrar ?? det.importePendiente ?? 0,
      cobrado: det.cobrado ?? false,
      mensualidadId: det.mensualidadId ?? null, // Se mantiene el valor original
      matriculaId: det.matriculaId ?? null,
      stockId: det.stockId ?? null,
    };
    console.log("[mapDetallePagos] Detalle mapeado:", mappedDetail);
    return mappedDetail;
  });
  console.log("[mapDetallePagos] Resultado mapeo completo:", mapped);
  return mapped;
};

/**
 * Hook para sincronizar los detalles de pago del formulario con los detalles pendientes
 * obtenidos en AlumnoDataResponse.
 */
export const useSyncDetalles = (alumnoData: AlumnoDataResponse | undefined) => {
  const { values, setFieldValue } = useFormikContext<CobranzasFormValues>();

  useEffect(() => {
    console.log("[useSyncDetalles] Iniciando sincronización...");
    if (!alumnoData) {
      console.log(
        "[useSyncDetalles] No hay alumnoData. Abortando sincronización."
      );
      return;
    }
    console.log("[useSyncDetalles] AlumnoData recibido:", alumnoData);
    console.log(
      "[useSyncDetalles] Valores actuales del formulario (detallePagos):",
      values.detallePagos
    );
    console.log(
      "[useSyncDetalles] Valores actuales del formulario (autoRemoved):",
      values.autoRemoved
    );

    // 1. Mapear los detalles pendientes obtenidos al formato del formulario.
    const autoDetails = mapDetallePagos(
      alumnoData.detallePagosPendientes || [],
      values.detallePagos
    );
    console.log(
      "[useSyncDetalles] Detalles automáticos mapeados:",
      autoDetails
    );

    // 2. Filtrar los detalles automáticos que hayan sido removidos manualmente y que tengan importePendiente mayor a 0.
    const removedIds = new Set(values.autoRemoved || []);
    console.log(
      "[useSyncDetalles] IDs removidos manualmente:",
      Array.from(removedIds)
    );
    const autoDetailsFiltered = autoDetails.filter((det) => {
      if (det.id != null) {
        const include =
          !removedIds.has(det.id) && Number(det.importePendiente) > 0;
        console.log(
          `[useSyncDetalles] Auto detalle id=${det.id} ${
            include ? "incluido" : "excluido"
          } por removedIds (${removedIds.has(det.id)}) y importePendiente (${
            det.importePendiente
          })`
        );
        return include;
      }
      const include = Number(det.importePendiente) > 0;
      console.log(
        `[useSyncDetalles] Auto detalle sin id ${
          include ? "incluido" : "excluido"
        } por importePendiente (${det.importePendiente})`
      );
      return include;
    });
    console.log(
      "[useSyncDetalles] Detalles automáticos filtrados:",
      autoDetailsFiltered
    );

    // 3. Extraer los detalles manuales ya presentes en el formulario (no generados automáticamente).
    const manualDetails = values.detallePagos.filter(
      (det) => !(det as any).autoGenerated
    );
    console.log("[useSyncDetalles] Detalles manuales actuales:", manualDetails);

    // 4. Fusionar manuales y automáticos, evitando duplicados.
    let mergedDetails;
    if (manualDetails.length > 0) {
      const manualIds = new Set(
        manualDetails.filter((det) => det.id != null).map((det) => det.id)
      );
      console.log(
        "[useSyncDetalles] IDs de detalles manuales:",
        Array.from(manualIds)
      );
      const finalAutoDetails = autoDetailsFiltered.filter((autoDet) => {
        if (autoDet.id != null) {
          const include = !manualIds.has(autoDet.id);
          if (!include) {
            console.log(
              `[useSyncDetalles] Auto detalle id=${autoDet.id} descartado porque ya existe manual.`
            );
          }
          return include;
        }
        const exists = manualDetails.some(
          (manDet) =>
            manDet.descripcionConcepto === autoDet.descripcionConcepto &&
            manDet.valorBase === autoDet.valorBase
        );
        if (exists) {
          console.log(
            "[useSyncDetalles] Auto detalle sin id descartado por coincidencia de campos:",
            autoDet
          );
        }
        return !exists;
      });
      console.log(
        "[useSyncDetalles] Detalles automáticos finales después de filtrar duplicados:",
        finalAutoDetails
      );
      mergedDetails = [...manualDetails, ...finalAutoDetails];
      console.log(
        "[useSyncDetalles] Fusionando manuales y automáticos no duplicados:",
        mergedDetails
      );
    } else {
      mergedDetails = autoDetailsFiltered;
      console.log(
        "[useSyncDetalles] No hay detalles manuales; usando automáticos:",
        mergedDetails
      );
    }

    // 5. Actualizar el formulario si la lista final difiere.
    if (!isEqual(mergedDetails, values.detallePagos)) {
      console.log(
        "[useSyncDetalles] La lista final difiere de la actual. Actualizando 'detallePagos' a:",
        mergedDetails
      );
      setFieldValue("detallePagos", mergedDetails);
    } else {
      console.log(
        "[useSyncDetalles] La lista final es igual a la actual. No se actualiza."
      );
    }
  }, [alumnoData, setFieldValue, values.detallePagos, values.autoRemoved]);
};
